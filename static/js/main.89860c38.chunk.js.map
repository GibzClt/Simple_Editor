{"version":3,"sources":["Editor.js","Previewer.js","Container.js","index.js"],"names":["Editor","inputValue","changeInput","value","cols","rows","onChange","id","Previewer","useEffect","newContentArr","split","map","item","document","getElementById","innerHTML","marked","join","initalState","INPUT_CHANGE","store","createStore","state","action","type","payLoad","mapStateToProp","mapDispatchToProp","dispatch","e","target","actionCreator","ConnectedEditor","connect","ConnectedProvider","Container","ReactDOM","render"],"mappings":"wMAkBeA,MAhBf,YAA2C,IAA1BC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,YAC3B,OACE,mCACA,8BACE,0BACEC,MAAOF,EACPG,KAAM,GACNC,KAAM,GACNC,SAAUJ,EACVK,GAAG,gB,wBCUIC,MAjBf,YAAiC,IAAbP,EAAY,EAAZA,WAWlB,OAVAQ,qBAAU,WACR,IACIC,EADaT,EAAWU,MAAM,IACHC,KAAI,SAAAC,GACjC,MAAY,OAATA,EACM,OAEFA,KAETC,SAASC,eAAe,WAAWC,UAAYC,IAAOP,EAAcQ,KAAK,OACxE,CAACjB,IAEF,qBAAKM,GAAG,a,cCmCNY,EAAY,CAChBhB,MAhCuB,+HAbL,uDAaK,s0BAZC,uLAYD,SAmCnBiB,EAAe,eAcfC,EAAQC,aAPO,WAA+B,IAA9BC,EAA6B,uDAAvBJ,EAAaK,EAAU,uCACjD,OAAOA,EAAOC,OACPL,EAAsB,CAACjB,MAAQqB,EAAOE,SAC1BH,KAMfI,EAAe,SAACJ,GACpB,MAAO,CACLtB,WAAasB,EAAMpB,QAIjByB,EAAkB,SAACC,GACvB,MAAO,CACL3B,YAAc,SAAC4B,GAAD,OAAKD,EAtBH,SAACC,GACnB,IAAO3B,EAAS2B,EAAEC,OAAX5B,MACP,MAAO,CAACsB,KAAOL,EAAcM,QAAUvB,GAoBT6B,CAAcF,OAIxCG,EAAkBC,YAAQP,EAAgBC,EAAxBM,CAA2ClC,GAC7DmC,EAAoBD,YAAQP,EAAgBC,EAAxBM,CAA2C1B,GAatD4B,MAXf,WACE,OACE,8BACE,eAAC,IAAD,CAAUf,MAAOA,EAAjB,UACE,cAACY,EAAD,IACA,cAACE,EAAD,UCtFRE,IAASC,OACL,mCACE,cAAC,EAAD,MAGJxB,SAASC,eAAe,W","file":"static/js/main.89860c38.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Editor({inputValue, changeInput}){\r\n  return (\r\n    <>\r\n    <div>\r\n      <textarea\r\n        value={inputValue}\r\n        cols={60}\r\n        rows={30}\r\n        onChange={changeInput}\r\n        id=\"editor\"\r\n      />\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Editor;","import React, { useEffect } from \"react\";\r\nimport \"./Previewer.css\"\r\nimport marked from \"marked\";\r\n\r\nfunction Previewer({inputValue}){\r\n  useEffect(()=>{\r\n    let contentArr = inputValue.split(\"\");\r\n    let newContentArr = contentArr.map(item=>{\r\n      if(item === \"\\n\"){\r\n        return \"  \\n\";\r\n      }\r\n      return item;\r\n    })\r\n    document.getElementById(\"preview\").innerHTML = marked(newContentArr.join(\"\"));\r\n  }, [inputValue])\r\n  return (\r\n    <div id=\"preview\">\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Previewer;","import React from \"react\";\r\nimport Editor from \"./Editor\";\r\nimport Previewer from \"./Previewer\";\r\nimport {createStore} from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst defaultCode = \"Heres some code, `<div></div>`, between 2 backticks.\"\r\nconst defaultMultiLineCode = `\r\n  \\`\\`\\`\r\n// this is multi-line code:\r\n\r\nfunction anotherExample(firstLine, lastLine) {\r\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\r\n    return multiLineCode;\r\n  }\r\n}\r\n\\`\\`\\`\r\n  `\r\n\r\n  const defaultInputValue = `# Welcome to my React Markdown Previewer!\r\n  ## This is a sub-heading...\r\n  ### And here's some other cool stuff:\r\n  ${defaultCode}\r\n  You can also make text **bold**... whoa!\r\nOr _italic_.\r\nOr... wait for it... **_both!_**\r\nAnd feel free to go crazy ~~crossing stuff out~~.\r\nThere's also [links](https://www.freecodecamp.org), and\r\n> Block Quotes!\r\n\r\nAnd if you want to get really crazy, even tables:\r\n\r\nWild Header | Crazy Header | Another Header?\r\n------------ | ------------- | -------------\r\nYour content can | be here, and it | can be here....\r\nAnd here. | Okay. | I think we get it.\r\n\r\n- And of course there are lists.\r\n  - Some are bulleted.\r\n     - With different indentation levels.\r\n        - That look like this.\r\n\r\n\r\n1. And there are numbered lists too.\r\n1. Use just 1s if you want!\r\n1. And last but not least, let's not forget embedded images:\r\n![freeCodeCamp Logo](https://cdn.freecodecamp.org/testable-projects-fcc/images/fcc_secondary.svg)\r\n${defaultMultiLineCode}\r\n  `;\r\n\r\nconst initalState={\r\n  value : defaultInputValue\r\n}\r\n\r\nconst INPUT_CHANGE = \"INPUT_CHANGE\";\r\n\r\nconst actionCreator=(e)=>{\r\n  const {value} = e.target;\r\n  return {type : INPUT_CHANGE, payLoad : value};\r\n}\r\n\r\nconst inputReducer = (state=initalState, action) =>{\r\n  switch(action.type){\r\n    case INPUT_CHANGE : return {value : action.payLoad};\r\n    default : return state;\r\n  }\r\n}\r\n\r\nconst store = createStore(inputReducer);\r\n\r\nconst mapStateToProp=(state)=>{\r\n  return {\r\n    inputValue : state.value\r\n  }\r\n}\r\n\r\nconst mapDispatchToProp=(dispatch)=>{\r\n  return {\r\n    changeInput : (e)=>dispatch(actionCreator(e))\r\n  }\r\n}\r\n\r\nconst ConnectedEditor = connect(mapStateToProp, mapDispatchToProp)(Editor);\r\nconst ConnectedProvider = connect(mapStateToProp, mapDispatchToProp)(Previewer);\r\n\r\nfunction Container(){\r\n  return(\r\n    <div>\r\n      <Provider store={store}>\r\n        <ConnectedEditor />\r\n        <ConnectedProvider />\r\n      </Provider>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Container from \"./Container\";\r\n\r\nReactDOM.render(\r\n    <>\r\n      <Container />\r\n    </>\r\n    ,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}